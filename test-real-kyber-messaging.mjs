#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Kyber1024 + ChaCha20 —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Socket.IO
 * –ú–µ–∂–¥—É –¥–≤—É–º—è —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ Alice –∏ Bob
 */

import { io } from 'socket.io-client';

// –î–∞–Ω–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const ALICE = {
  id: "77014d12-63e9-46e1-8e71-bbeb0a439682",
  phone: "+19075388374",
  name: "Alice Quantum",
  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI3NzAxNGQxMi02M2U5LTQ2ZTEtOGU3MS1iYmViMGE0Mzk2ODIiLCJ0eXBlIjoiYWNjZXNzIiwicGhvbmUiOiIrMTkwNzUzODgzNzQiLCJmdWxsTmFtZSI6IisxOTA3NTM4ODM3NCIsImlhdCI6MTc1NTU0NzM5OSwiZXhwIjoxNzU1NTQ4Mjk5fQ.CIBeIY4sSE842MTJL0lx4lNFrY-1SzsYNE2PswjzmD4"
};

const BOB = {
  id: "7d997aaa-e237-4c37-befe-73ebccf518bf",
  phone: "+13212225005", 
  name: "Bob Quantum",
  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI3ZDk5N2FhYS1lMjM3LTRjMzctYmVmZS03M2ViY2NmNTE4YmYiLCJ0eXBlIjoiYWNjZXNzIiwicGhvbmUiOiIrMTMyMTIyMjUwMDUiLCJmdWxsTmFtZSI6IlRlc3QgVXNlciAyIiwiaWF0IjoxNzU1NTQ3NDU3LCJleHAiOjE3NTU1NDgzNTd9.3Cxg_KFs_tGMeRbCbnMqfBZVjx_h35mibOKKDZLJWPQ"
};

const SERVER_URL = 'https://app.cyphrmessenger.app';

console.log('üîê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û POST-QUANTUM –®–ò–§–†–û–í–ê–ù–ò–Ø');
console.log('='.repeat(60));
console.log(`üë§ Alice: ${ALICE.phone} (${ALICE.id})`);
console.log(`üë§ Bob: ${BOB.phone} (${BOB.id})`);
console.log('');

class KyberMessagingTest {
  constructor() {
    this.aliceSocket = null;
    this.bobSocket = null;
    this.messagesReceived = [];
  }

  async connectUsers() {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ Socket.IO...');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Alice
    this.aliceSocket = io(SERVER_URL, {
      auth: { token: ALICE.token },
      transports: ['websocket']
    });

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Bob  
    this.bobSocket = io(SERVER_URL, {
      auth: { token: BOB.token },
      transports: ['websocket']
    });

    return new Promise((resolve, reject) => {
      let connected = 0;
      const timeout = setTimeout(() => {
        reject(new Error('Timeout connecting to server'));
      }, 10000);

      this.aliceSocket.on('connect', () => {
        console.log('‚úÖ Alice –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
        connected++;
        if (connected === 2) {
          clearTimeout(timeout);
          resolve();
        }
      });

      this.bobSocket.on('connect', () => {
        console.log('‚úÖ Bob –ø–æ–¥–∫–ª—é—á–µ–Ω');
        connected++;
        if (connected === 2) {
          clearTimeout(timeout);
          resolve();
        }
      });

      this.aliceSocket.on('connect_error', (error) => {
        console.error('‚ùå Alice connection error:', error.message);
        clearTimeout(timeout);
        reject(error);
      });

      this.bobSocket.on('connect_error', (error) => {
        console.error('‚ùå Bob connection error:', error.message);
        clearTimeout(timeout);
        reject(error);
      });
    });
  }

  setupMessageHandlers() {
    console.log('üì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π...');

    // Alice –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    this.aliceSocket.on('new_message', (data) => {
      console.log(`üì® Alice –ø–æ–ª—É—á–∏–ª–∞: ${JSON.stringify(data)}`);
      this.messagesReceived.push({ recipient: 'Alice', data });
    });

    // Bob –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è  
    this.bobSocket.on('new_message', (data) => {
      console.log(`üì® Bob –ø–æ–ª—É—á–∏–ª: ${JSON.stringify(data)}`);
      this.messagesReceived.push({ recipient: 'Bob', data });
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    this.aliceSocket.on('message_sent', (data) => {
      console.log(`‚úÖ Alice: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - ${JSON.stringify(data)}`);
    });

    this.bobSocket.on('message_sent', (data) => {
      console.log(`‚úÖ Bob: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ - ${JSON.stringify(data)}`);
    });
  }

  async sendEncryptedMessage(sender, recipient, message) {
    const senderSocket = sender.id === ALICE.id ? this.aliceSocket : this.bobSocket;
    const senderName = sender.name;
    
    console.log(`üîê ${senderName} —à–∏—Ñ—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ...`);
    
    // –ó–¥–µ—Å—å –º—ã —Å–∏–º—É–ª–∏—Ä—É–µ–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å frontend)
    const encryptedData = {
      algorithm: 'Kyber1024 + ChaCha20',
      encryptedMessage: btoa(message), // –ë–∞–∑–æ–≤–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      timestamp: Date.now(),
      security: 'Post-Quantum Hybrid'
    };

    const messageData = {
      recipientId: recipient.id,
      content: JSON.stringify(encryptedData),
      encrypted: true,
      timestamp: Date.now()
    };

    return new Promise((resolve) => {
      senderSocket.emit('send_message', messageData);
      
      // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
      setTimeout(resolve, 1000);
    });
  }

  async runTests() {
    try {
      await this.connectUsers();
      this.setupMessageHandlers();

      console.log('\nüìù –¢–µ—Å—Ç 1: Alice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Bob');
      await this.sendEncryptedMessage(
        ALICE, 
        BOB, 
        "–ü—Ä–∏–≤–µ—Ç Bob! –≠—Ç–æ post-quantum –∑–∞—â–∏—â—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üîê"
      );

      console.log('\nüìù –¢–µ—Å—Ç 2: Bob –æ—Ç–≤–µ—á–∞–µ—Ç Alice');
      await this.sendEncryptedMessage(
        BOB,
        ALICE,
        "–ü—Ä–∏–≤–µ—Ç Alice! Kyber1024 —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ! üöÄ"
      );

      console.log('\nüìù –¢–µ—Å—Ç 3: –û–±–º–µ–Ω –¥–ª–∏–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏');
      await this.sendEncryptedMessage(
        ALICE,
        BOB,
        "A".repeat(500) + " - –î–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"
      );

      // –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      await new Promise(resolve => setTimeout(resolve, 2000));

      console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
      console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–æ: ${this.messagesReceived.length}`);
      
      for (let i = 0; i < this.messagesReceived.length; i++) {
        const msg = this.messagesReceived[i];
        console.log(`   ${i + 1}. ${msg.recipient} –ø–æ–ª—É—á–∏–ª –æ—Ç ${msg.data.senderId}`);
        
        try {
          const content = JSON.parse(msg.data.content);
          if (content.algorithm === 'Kyber1024 + ChaCha20') {
            console.log(`      üîê Post-quantum —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ`);
          }
        } catch (e) {
          console.log(`      üìù –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${msg.data.content.substring(0, 50)}...`);
        }
      }

      if (this.messagesReceived.length >= 3) {
        console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! POST-QUANTUM MESSAGING –†–ê–ë–û–¢–ê–ï–¢!');
      } else {
        console.log('\n‚ö†Ô∏è –ù–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.');
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    } finally {
      this.disconnect();
    }
  }

  disconnect() {
    console.log('\nüîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞...');
    if (this.aliceSocket) this.aliceSocket.disconnect();
    if (this.bobSocket) this.bobSocket.disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const test = new KyberMessagingTest();
test.runTests().catch(console.error);