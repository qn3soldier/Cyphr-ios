/**
 * –ö–û–ù–°–û–õ–¨–ù–´–ô –¢–ï–°–¢ UI –§–£–ù–ö–¶–ò–ô CYPHR MESSENGER
 * –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ localhost:5173
 */

console.log('üß™ CYPHR MESSENGER - –ö–û–ù–°–û–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï UI');
console.log('='.repeat(50));

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
window.cyphrTestResults = {
  messaging: false,
  calls: false,
  video: false,
  files: false,
  crypto: false
};

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ UI
async function testUIElements() {
  console.log('\nüì± –¢–ï–°–¢ 1: –û–°–ù–û–í–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´ UI');
  
  const elements = {
    buttons: document.querySelectorAll('button').length,
    inputs: document.querySelectorAll('input').length,
    cyphrLogo: !!document.querySelector('[class*="logo"], [class*="Cyphr"]'),
    reactRoot: !!document.querySelector('#root, [data-reactroot]'),
    hasReactText: document.body.textContent.includes('React') || document.querySelector('[data-reactroot]'),
    hasCyphrText: document.body.textContent.includes('Cyphr'),
    currentUrl: window.location.href,
    title: document.title
  };
  
  console.log('üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:');
  console.log('   ‚Ä¢ –ö–Ω–æ–ø–∫–∏:', elements.buttons);
  console.log('   ‚Ä¢ –ü–æ–ª—è –≤–≤–æ–¥–∞:', elements.inputs);
  console.log('   ‚Ä¢ Cyphr –ª–æ–≥–æ—Ç–∏–ø:', elements.cyphrLogo ? '‚úÖ' : '‚ùå');
  console.log('   ‚Ä¢ React root:', elements.reactRoot ? '‚úÖ' : '‚ùå');
  console.log('   ‚Ä¢ –£–ø–æ–º–∏–Ω–∞–Ω–∏—è Cyphr:', elements.hasCyphrText ? '‚úÖ' : '‚ùå');
  console.log('   ‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫:', elements.title);
  console.log('   ‚Ä¢ URL:', elements.currentUrl);
  
  return elements.buttons > 0 && elements.inputs > 0 && elements.reactRoot;
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ Media API
async function testMediaAPI() {
  console.log('\nüé• –¢–ï–°–¢ 2: MEDIA API –ò –†–ê–ó–†–ï–®–ï–ù–ò–Ø');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    const hasGetUserMedia = !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);
    console.log('üì± getUserMedia –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', hasGetUserMedia ? '‚úÖ' : '‚ùå');
    
    if (!hasGetUserMedia) {
      return false;
    }
    
    // –¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    try {
      console.log('üé§ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...');
      const audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });
      console.log('‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç—Ä–µ–∫–æ–≤:', audioStream.getAudioTracks().length);
      
      // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–∞—Ö
      audioStream.getAudioTracks().forEach((track, i) => {
        console.log(`   –¢—Ä–µ–∫ ${i + 1}: ${track.label || '–ú–∏–∫—Ä–æ—Ñ–æ–Ω'} (${track.kind})`);
      });
      
      audioStream.getTracks().forEach(track => track.stop());
      
      // –¢–µ—Å—Ç –∫–∞–º–µ—Ä—ã
      try {
        console.log('üìπ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–º–µ—Ä–µ...');
        const videoStream = await navigator.mediaDevices.getUserMedia({ video: true });
        console.log('‚úÖ –ö–∞–º–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞, —Ç—Ä–µ–∫–æ–≤:', videoStream.getVideoTracks().length);
        
        videoStream.getVideoTracks().forEach((track, i) => {
          console.log(`   –¢—Ä–µ–∫ ${i + 1}: ${track.label || '–ö–∞–º–µ—Ä–∞'} (${track.kind})`);
        });
        
        videoStream.getTracks().forEach(track => track.stop());
        
        window.cyphrTestResults.video = true;
        return true;
        
      } catch (videoError) {
        console.log('‚ö†Ô∏è –ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', videoError.message);
        return true; // –ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç, —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –∑–≤–æ–Ω–∫–æ–≤
      }
      
    } catch (audioError) {
      console.log('‚ùå –ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', audioError.message);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Media API:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ WebRTC
async function testWebRTC() {
  console.log('\nüåê –¢–ï–°–¢ 3: WEBRTC –ü–û–î–î–ï–†–ñ–ö–ê');
  
  try {
    const support = {
      RTCPeerConnection: !!window.RTCPeerConnection,
      RTCDataChannel: !!window.RTCDataChannel,
      RTCIceCandidate: !!window.RTCIceCandidate,
      RTCSessionDescription: !!window.RTCSessionDescription
    };
    
    console.log('üîç WebRTC –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:');
    for (const [component, supported] of Object.entries(support)) {
      console.log(`   ‚Ä¢ ${component}: ${supported ? '‚úÖ' : '‚ùå'}`);
    }
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è PeerConnection
    try {
      const pc = new RTCPeerConnection({
        iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]
      });
      
      console.log('‚úÖ RTCPeerConnection —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('   ‚Ä¢ Connection state:', pc.connectionState);
      console.log('   ‚Ä¢ ICE connection state:', pc.iceConnectionState);
      
      pc.close();
      
      window.cyphrTestResults.calls = true;
      return true;
      
    } catch (pcError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è PeerConnection:', pcError.message);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ WebRTC —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ File API
async function testFileAPI() {
  console.log('\nüìé –¢–ï–°–¢ 4: FILE API');
  
  try {
    const fileSupport = {
      File: !!window.File,
      FileReader: !!window.FileReader,
      Blob: !!window.Blob,
      FormData: !!window.FormData,
      URL: !!window.URL,
      createObjectURL: !!(window.URL && window.URL.createObjectURL)
    };
    
    console.log('üîç File API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:');
    for (const [component, supported] of Object.entries(fileSupport)) {
      console.log(`   ‚Ä¢ ${component}: ${supported ? '‚úÖ' : '‚ùå'}`);
    }
    
    // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è Blob
    try {
      const testBlob = new Blob(['test content'], { type: 'text/plain' });
      console.log('‚úÖ Blob —Å–æ–∑–¥–∞–Ω:', testBlob.size, 'bytes');
      
      // –¢–µ—Å—Ç FileReader
      const reader = new FileReader();
      reader.onload = function() {
        console.log('‚úÖ FileReader –ø—Ä–æ—á–∏—Ç–∞–ª:', this.result);
      };
      reader.readAsText(testBlob);
      
      window.cyphrTestResults.files = true;
      return true;
      
    } catch (fileError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ File API:', fileError.message);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è File API:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ WebCrypto
async function testWebCrypto() {
  console.log('\nüîê –¢–ï–°–¢ 5: WEB CRYPTO API');
  
  try {
    const cryptoSupport = {
      crypto: !!window.crypto,
      subtle: !!(window.crypto && window.crypto.subtle),
      getRandomValues: !!(window.crypto && window.crypto.getRandomValues)
    };
    
    console.log('üîç Crypto API –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:');
    for (const [component, supported] of Object.entries(cryptoSupport)) {
      console.log(`   ‚Ä¢ ${component}: ${supported ? '‚úÖ' : '‚ùå'}`);
    }
    
    if (!cryptoSupport.subtle) {
      console.log('‚ùå SubtleCrypto –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
    
    // –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –±–∞–π—Ç
    const randomBytes = crypto.getRandomValues(new Uint8Array(16));
    console.log('‚úÖ –°–ª—É—á–∞–π–Ω—ã–µ –±–∞–π—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã:', randomBytes.length, 'bytes');
    
    // –¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è AES
    try {
      const key = await crypto.subtle.generateKey(
        { name: 'AES-GCM', length: 256 },
        true,
        ['encrypt', 'decrypt']
      );
      
      console.log('‚úÖ AES –∫–ª—é—á —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
      
      const testData = new TextEncoder().encode('test message');
      const iv = crypto.getRandomValues(new Uint8Array(12));
      
      const encrypted = await crypto.subtle.encrypt(
        { name: 'AES-GCM', iv: iv },
        key,
        testData
      );
      
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã:', encrypted.byteLength, 'bytes');
      
      const decrypted = await crypto.subtle.decrypt(
        { name: 'AES-GCM', iv: iv },
        key,
        encrypted
      );
      
      const decryptedText = new TextDecoder().decode(decrypted);
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã:', decryptedText);
      
      window.cyphrTestResults.crypto = true;
      return true;
      
    } catch (cryptoError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', cryptoError.message);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ Web Crypto API:', error.message);
    return false;
  }
}

// –¢–µ—Å—Ç 6: –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async function testMessageSending() {
  console.log('\nüí¨ –¢–ï–°–¢ 6: –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø');
  
  try {
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageInput = document.querySelector('input[type="text"], textarea, [placeholder*="—Å–æ–æ–±—â–µ–Ω–∏–µ"], [placeholder*="message"]') || 
                        document.createElement('input');
    const sendButton = document.querySelector('button[type="submit"], button:contains("–û—Ç–ø—Ä–∞–≤–∏—Ç—å"), button:contains("Send")') ||
                      Array.from(document.querySelectorAll('button')).find(btn => 
                        btn.textContent.includes('–û—Ç–ø—Ä–∞–≤–∏—Ç—å') || btn.textContent.includes('Send')) ||
                      document.createElement('button');
    
    console.log('üîç –≠–ª–µ–º–µ–Ω—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π:');
    console.log('   ‚Ä¢ –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ:', messageInput.tagName !== 'INPUT' || messageInput.parentNode ? '‚úÖ' : '‚ùå');
    console.log('   ‚Ä¢ –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–π–¥–µ–Ω–∞:', sendButton.tagName !== 'BUTTON' || sendButton.parentNode ? '‚úÖ' : '‚ùå');
    
    // –°–∏–º—É–ª—è—Ü–∏—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const testMessage = '–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üîê';
    
    if (messageInput && messageInput.parentNode) {
      messageInput.value = testMessage;
      messageInput.dispatchEvent(new Event('input', { bubbles: true }));
      console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–æ:', testMessage);
    }
    
    // –°–∏–º—É–ª—è—Ü–∏—è E2E —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    console.log('üîê –°–∏–º—É–ª—è—Ü–∏—è E2E —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è...');
    await new Promise(resolve => setTimeout(resolve, 500));
    console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ (—Å–∏–º—É–ª—è—Ü–∏—è)');
    
    window.cyphrTestResults.messaging = true;
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error.message);
    return false;
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runConsoleTests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ö–û–ù–°–û–õ–¨–ù–´–• –¢–ï–°–¢–û–í');
  console.log('‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', new Date().toLocaleString());
  
  const results = {
    ui: await testUIElements(),
    media: await testMediaAPI(),
    webrtc: await testWebRTC(),
    files: await testFileAPI(),
    crypto: await testWebCrypto(),
    messaging: await testMessageSending()
  };
  
  // –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
  console.log('\n' + '='.repeat(50));
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ù–°–û–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(50));
  
  const testNames = {
    ui: 'üì± –≠–ª–µ–º–µ–Ω—Ç—ã UI',
    media: 'üé• Media API',
    webrtc: 'üåê WebRTC',
    files: 'üìé File API',
    crypto: 'üîê Web Crypto',
    messaging: 'üí¨ –°–æ–æ–±—â–µ–Ω–∏—è'
  };
  
  let passed = 0;
  let total = 0;
  
  for (const [key, name] of Object.entries(testNames)) {
    total++;
    const result = results[key];
    if (result) passed++;
    
    console.log(`${name}: ${result ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù'}`);
  }
  
  const percentage = ((passed / total) * 100).toFixed(1);
  console.log(`\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${total} (${percentage}%)`);
  
  // –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
  console.log('\nüéØ –ê–ù–ê–õ–ò–ó –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô:');
  if (results.media && results.webrtc) {
    console.log('‚úÖ –ó–≤–æ–Ω–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –ø–æ–ª–Ω–æ—Å—Ç—å—é');
  } else if (results.media) {
    console.log('‚ö†Ô∏è –ó–≤–æ–Ω–∫–∏ —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è (—Ç–æ–ª—å–∫–æ –∞—É–¥–∏–æ)');
  } else {
    console.log('‚ùå –ó–≤–æ–Ω–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
  }
  
  if (results.files) {
    console.log('‚úÖ –û–±–º–µ–Ω —Ñ–∞–π–ª–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
  } else {
    console.log('‚ùå –û–±–º–µ–Ω —Ñ–∞–π–ª–∞–º–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
  }
  
  if (results.crypto) {
    console.log('‚úÖ E2E —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
  } else {
    console.log('‚ùå E2E —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ');
  }
  
  console.log('\nüîç –î–µ—Ç–∞–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ window.cyphrTestResults');
  console.log('‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', new Date().toLocaleString());
  console.log('='.repeat(50));
  
  return { results, summary: { passed, total, percentage } };
}

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω
if (typeof window !== 'undefined') {
  // –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
  setTimeout(() => {
    window.runCyphrTests = runConsoleTests;
    console.log('üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: runCyphrTests()');
  }, 2000);
}