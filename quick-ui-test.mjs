#!/usr/bin/env node

/**
 * –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï UI –§–£–ù–ö–¶–ò–ô CYPHR MESSENGER
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ DOM API
 */

import puppeteer from 'puppeteer';
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

console.log('üöÄ –ë–´–°–¢–†–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï UI –§–£–ù–ö–¶–ò–ô CYPHR MESSENGER');
console.log('=' .repeat(60));

let browser;
let page;

async function setupBrowser() {
  console.log('üåê –ó–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è UI —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
  
  try {
    browser = await puppeteer.launch({
      headless: false, // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –±—Ä–∞—É–∑–µ—Ä –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
      args: [
        '--disable-web-security',
        '--disable-features=VizDisplayCompositor',
        '--allow-running-insecure-content',
        '--disable-dev-shm-usage',
        '--no-sandbox'
      ]
    });
    
    page = await browser.newPage();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –∫–∞–º–µ—Ä—ã –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
    const context = browser.defaultBrowserContext();
    await context.overridePermissions('http://localhost:5173', [
      'camera',
      'microphone',
      'notifications'
    ]);
    
    await page.setViewport({ width: 1280, height: 720 });
    console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–∞—É–∑–µ—Ä–∞:', error.message);
    return false;
  }
}

async function testMainApplication() {
  console.log('\nüì± –¢–ï–°–¢ 1: –ì–õ–ê–í–ù–û–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–ï');
  
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ http://localhost:5173/...');
    await page.goto('http://localhost:5173/', { 
      waitUntil: 'networkidle0',
      timeout: 10000 
    });
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    await page.waitForSelector('body', { timeout: 5000 });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const title = await page.title();
    console.log('üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', title);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const cyphrElements = await page.evaluate(() => {
      const elements = {
        hasLogo: !!document.querySelector('[class*="logo"], [class*="Cyphr"]'),
        hasButtons: document.querySelectorAll('button').length > 0,
        hasInputs: document.querySelectorAll('input').length > 0,
        bodyClasses: document.body.className,
        cyphrText: document.body.textContent.includes('Cyphr'),
        reactRoot: !!document.querySelector('#root, [data-reactroot]')
      };
      
      return elements;
    });
    
    console.log('üîç –≠–ª–µ–º–µ–Ω—Ç—ã UI:');
    console.log('   ‚Ä¢ –õ–æ–≥–æ—Ç–∏–ø:', cyphrElements.hasLogo ? '‚úÖ –ù–∞–π–¥–µ–Ω' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω');
    console.log('   ‚Ä¢ –ö–Ω–æ–ø–∫–∏:', cyphrElements.hasButtons ? '‚úÖ –ù–∞–π–¥–µ–Ω—ã' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã');
    console.log('   ‚Ä¢ –ü–æ–ª—è –≤–≤–æ–¥–∞:', cyphrElements.hasInputs ? '‚úÖ –ù–∞–π–¥–µ–Ω—ã' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã');
    console.log('   ‚Ä¢ React root:', cyphrElements.reactRoot ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    console.log('   ‚Ä¢ Cyphr —É–ø–æ–º–∏–Ω–∞–Ω–∏—è:', cyphrElements.cyphrText ? '‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const registrationElements = await page.evaluate(() => {
      const phoneInputs = document.querySelectorAll('input[type="tel"], input[placeholder*="phone"], input[placeholder*="–Ω–æ–º–µ—Ä"]');
      const otpInputs = document.querySelectorAll('input[placeholder*="code"], input[placeholder*="–∫–æ–¥"], [class*="otp"]');
      const submitButtons = document.querySelectorAll('button[type="submit"], button:contains("–í–æ–π—Ç–∏"), button:contains("–û—Ç–ø—Ä–∞–≤–∏—Ç—å")');
      
      return {
        phoneInputs: phoneInputs.length,
        otpInputs: otpInputs.length,
        submitButtons: submitButtons.length,
        currentUrl: window.location.href
      };
    });
    
    console.log('üì± –≠–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:');
    console.log('   ‚Ä¢ –ü–æ–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', registrationElements.phoneInputs);
    console.log('   ‚Ä¢ –ü–æ–ª—è OTP:', registrationElements.otpInputs);
    console.log('   ‚Ä¢ –ö–Ω–æ–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏:', registrationElements.submitButtons);
    console.log('   ‚Ä¢ –¢–µ–∫—É—â–∏–π URL:', registrationElements.currentUrl);
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error.message);
    return false;
  }
}

async function testInteractiveTestPage() {
  console.log('\nüß™ –¢–ï–°–¢ 2: –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –¢–ï–°–¢–û–í–ê–Ø –°–¢–†–ê–ù–ò–¶–ê');
  
  try {
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ test-real-ui-functions.html...');
    await page.goto('http://localhost:5173/test-real-ui-functions.html', { 
      waitUntil: 'networkidle0',
      timeout: 10000 
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const title = await page.title();
    console.log('üìÑ –ó–∞–≥–æ–ª–æ–≤–æ–∫:', title);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–µ–∫—Ü–∏–π
    const testSections = await page.evaluate(() => {
      const sections = document.querySelectorAll('.test-section');
      const testNames = Array.from(sections).map(section => {
        const heading = section.querySelector('h3');
        return heading ? heading.textContent : '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
      });
      
      return {
        count: sections.length,
        names: testNames,
        hasButtons: document.querySelectorAll('button').length > 0,
        hasChatInterface: !!document.getElementById('test-chat'),
        hasVideoElements: !!document.querySelector('video'),
        hasFileDropZone: !!document.getElementById('file-drop-zone')
      };
    });
    
    console.log('üß™ –¢–µ—Å—Ç–æ–≤—ã–µ —Å–µ–∫—Ü–∏–∏:', testSections.count);
    testSections.names.forEach((name, index) => {
      console.log(`   ${index + 1}. ${name}`);
    });
    
    console.log('üîç –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã:');
    console.log('   ‚Ä¢ –ö–Ω–æ–ø–∫–∏:', testSections.hasButtons ? '‚úÖ –ù–∞–π–¥–µ–Ω—ã' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
    console.log('   ‚Ä¢ –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å:', testSections.hasChatInterface ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
    console.log('   ‚Ä¢ –í–∏–¥–µ–æ —ç–ª–µ–º–µ–Ω—Ç—ã:', testSections.hasVideoElements ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
    console.log('   ‚Ä¢ –ó–æ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:', testSections.hasFileDropZone ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
    
    return true;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error.message);
    return false;
  }
}

async function testMessagingFunction() {
  console.log('\nüí¨ –¢–ï–°–¢ 3: –§–£–ù–ö–¶–ò–Ø –°–û–û–ë–©–ï–ù–ò–ô');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    const chatExists = await page.$('#test-chat');
    if (!chatExists) {
      console.log('‚ö†Ô∏è –ß–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É —Ç–µ—Å—Ç—É');
      return false;
    }
    
    console.log('üìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è...');
    
    // –í–≤–æ–¥–∏–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await page.type('#message-input', '–¢–µ—Å—Ç–æ–≤–æ–µ E2E –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üîê');
    await page.waitForTimeout(500);
    
    // –ù–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    await page.click('button[onclick="sendTestMessage()"]');
    await page.waitForTimeout(1000);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ—è–≤–∏–ª–æ—Å—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const messagesCount = await page.evaluate(() => {
      const messages = document.querySelectorAll('.message');
      return messages.length;
    });
    
    console.log('üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', messagesCount);
    
    if (messagesCount > 0) {
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
      
      // –ñ–¥–µ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
      await page.waitForTimeout(2000);
      
      const finalMessageCount = await page.evaluate(() => {
        const messages = document.querySelectorAll('.message');
        return messages.length;
      });
      
      if (finalMessageCount > messagesCount) {
        console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç');
      }
      
      return true;
    } else {
      console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è');
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error.message);
    return false;
  }
}

async function testMediaPermissions() {
  console.log('\nüé• –¢–ï–°–¢ 4: –†–ê–ó–†–ï–®–ï–ù–ò–Ø –ö–ê–ú–ï–†–´ –ò –ú–ò–ö–†–û–§–û–ù–ê');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Media API
    const mediaSupport = await page.evaluate(async () => {
      try {
        const hasGetUserMedia = !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia);
        
        if (!hasGetUserMedia) {
          return { supported: false, error: 'getUserMedia –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è' };
        }
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É
        try {
          const audioStream = await navigator.mediaDevices.getUserMedia({ audio: true });
          audioStream.getTracks().forEach(track => track.stop());
          
          // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ
          try {
            const videoStream = await navigator.mediaDevices.getUserMedia({ video: true });
            videoStream.getTracks().forEach(track => track.stop());
            
            return { 
              supported: true, 
              audio: true, 
              video: true,
              error: null
            };
          } catch (videoError) {
            return { 
              supported: true, 
              audio: true, 
              video: false,
              error: '–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ' + videoError.message
            };
          }
        } catch (audioError) {
          return { 
            supported: true, 
            audio: false, 
            video: false,
            error: '–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ' + audioError.message
          };
        }
      } catch (error) {
        return { supported: false, error: error.message };
      }
    });
    
    console.log('üîç –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Media API:', mediaSupport.supported ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç');
    
    if (mediaSupport.supported) {
      console.log('üé§ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', mediaSupport.audio ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
      console.log('üìπ –î–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ:', mediaSupport.video ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
      
      if (mediaSupport.error) {
        console.log('‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:', mediaSupport.error);
      }
      
      return mediaSupport.audio && mediaSupport.video;
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞:', mediaSupport.error);
      return false;
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:', error.message);
    return false;
  }
}

async function testWebRTCSupport() {
  console.log('\nüåê –¢–ï–°–¢ 5: –ü–û–î–î–ï–†–ñ–ö–ê WEBRTC');
  
  try {
    const webrtcSupport = await page.evaluate(() => {
      const support = {
        RTCPeerConnection: !!window.RTCPeerConnection,
        getUserMedia: !!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia),
        RTCDataChannel: !!window.RTCDataChannel,
        webkitRTCPeerConnection: !!window.webkitRTCPeerConnection,
        mozRTCPeerConnection: !!window.mozRTCPeerConnection
      };
      
      // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å RTCPeerConnection
      try {
        const pc = new RTCPeerConnection();
        support.canCreatePeerConnection = true;
        pc.close();
      } catch (error) {
        support.canCreatePeerConnection = false;
        support.peerConnectionError = error.message;
      }
      
      return support;
    });
    
    console.log('üîç WebRTC –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:');
    console.log('   ‚Ä¢ RTCPeerConnection:', webrtcSupport.RTCPeerConnection ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
    console.log('   ‚Ä¢ getUserMedia:', webrtcSupport.getUserMedia ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
    console.log('   ‚Ä¢ RTCDataChannel:', webrtcSupport.RTCDataChannel ? '‚úÖ –ï—Å—Ç—å' : '‚ùå –ù–µ—Ç');
    console.log('   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', webrtcSupport.canCreatePeerConnection ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –û—à–∏–±–∫–∞');
    
    if (webrtcSupport.peerConnectionError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ PeerConnection:', webrtcSupport.peerConnectionError);
    }
    
    const isFullySupported = webrtcSupport.RTCPeerConnection && 
                           webrtcSupport.getUserMedia && 
                           webrtcSupport.canCreatePeerConnection;
    
    console.log('üèÅ WebRTC –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è:', isFullySupported ? '‚úÖ –î–∞' : '‚ùå –ù–µ—Ç');
    
    return isFullySupported;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebRTC:', error.message);
    return false;
  }
}

async function cleanup() {
  console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...');
  
  if (browser) {
    await browser.close();
    console.log('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function runUITests() {
  console.log('‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:', new Date().toLocaleString());
  const startTime = Date.now();
  
  const results = {
    setup: false,
    mainApp: false,
    testPage: false,
    messaging: false,
    mediaPermissions: false,
    webrtcSupport: false
  };
  
  try {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
    results.setup = await setupBrowser();
    if (!results.setup) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä');
    }
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    results.mainApp = await testMainApplication();
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    results.testPage = await testInteractiveTestPage();
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    results.messaging = await testMessagingFunction();
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    results.mediaPermissions = await testMediaPermissions();
    
    // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebRTC
    results.webrtcSupport = await testWebRTCSupport();
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  } finally {
    await cleanup();
  }
  
  // –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
  const endTime = Date.now();
  const duration = ((endTime - startTime) / 1000).toFixed(1);
  
  console.log('\n' + '='.repeat(60));
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ UI –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('='.repeat(60));
  
  const testNames = {
    setup: 'üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞',
    mainApp: 'üì± –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
    testPage: 'üß™ –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞',
    messaging: 'üí¨ –§—É–Ω–∫—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π',
    mediaPermissions: 'üé• –ú–µ–¥–∏–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è',
    webrtcSupport: 'üåê WebRTC –ø–æ–¥–¥–µ—Ä–∂–∫–∞'
  };
  
  let passed = 0;
  let total = 0;
  
  for (const [key, name] of Object.entries(testNames)) {
    total++;
    const result = results[key];
    if (result) passed++;
    
    console.log(`${name}: ${result ? '‚úÖ –ü–†–û–ô–î–ï–ù' : '‚ùå –ü–†–û–í–ê–õ–ï–ù'}`);
  }
  
  const percentage = ((passed / total) * 100).toFixed(1);
  console.log(`\nüìà –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${total} (${percentage}%)`);
  console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration} —Å–µ–∫—É–Ω–¥`);
  
  if (passed === total) {
    console.log('\nüéâ –í–°–ï UI –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!');
  } else if (passed >= Math.ceil(total * 0.75)) {
    console.log('\n‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û');
  } else {
    console.log('\n‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø');
  }
  
  console.log('‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:', new Date().toLocaleString());
  console.log('='.repeat(60));
  
  return passed === total;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  runUITests().then(success => {
    process.exit(success ? 0 : 1);
  }).catch(error => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

export { runUITests };